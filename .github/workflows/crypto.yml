name: Crypto AI Bot

on:
  schedule:
    - cron: "*/30 * * * *"     # Every 30 minutes
  workflow_dispatch:            # Allow manual trigger

permissions:
  contents: write

jobs:
  run-signals:
    runs-on: ubuntu-latest

    steps:
      # ‚úÖ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # ‚úÖ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ‚úÖ Cache pip dependencies
      - name: Cache pip packages
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ‚úÖ Always install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          else
            echo "‚ö†Ô∏è requirements.txt not found, installing essentials..."
            pip install yfinance pandas numpy ta joblib matplotlib scikit-learn vectorbt
          fi

      # ‚úÖ Convert notebook to .py if exists
      - name: Convert notebook to Python
        run: |
          if [ -f "crypto_ai_backtest_multi.ipynb" ]; then
            echo "üß† Converting crypto_ai_backtest_multi.ipynb -> crypto_ai_backtest_multi.py"
            jupyter nbconvert --to script crypto_ai_backtest_multi.ipynb
          else
            echo "‚ö†Ô∏è Notebook not found; skipping conversion."
          fi

      # ‚úÖ Create utils folder & sync script if missing
      - name: Ensure utils/sync_strategy.py exists
        run: |
          mkdir -p utils
          if [ ! -f utils/sync_strategy.py ]; then
            echo "üõ†Ô∏è Creating utils/sync_strategy.py ..."
            cat << 'EOF' > utils/sync_strategy.py
import re, shutil
from pathlib import Path

NOTEBOOK_PY = Path("crypto_ai_backtest_multi.py")
SIGNAL_PY = Path("crypto_signal.py")
BACKUP = Path("crypto_signal_backup.py")

if SIGNAL_PY.exists():
    shutil.copy2(SIGNAL_PY, BACKUP)
    print(f"üì¶ Backup created: {BACKUP}")

if not NOTEBOOK_PY.exists():
    raise FileNotFoundError("‚ö†Ô∏è crypto_ai_backtest_multi.py not found!")

with open(NOTEBOOK_PY, "r") as f:
    notebook_code = f.read()

match = re.search(r"def\s+(generate_signals|backtest_signals|analyze_and_backtest)\s*\(.*?\):[\\s\\S]+?(?=\\ndef\\s|\\Z)", notebook_code)
if not match:
    raise ValueError("‚ùå Could not find a signal generation function in notebook export.")
strategy_code = match.group(0)

with open(SIGNAL_PY, "r") as f:
    original = f.read()

if "# === STRATEGY SECTION START ===" not in original:
    new_code = (
        original
        + "\\n\\n# === STRATEGY SECTION START ===\\n"
        + strategy_code
        + "\\n# === STRATEGY SECTION END ===\\n"
    )
else:
    new_code = re.sub(
        r"# === STRATEGY SECTION START ===[\\s\\S]+?# === STRATEGY SECTION END ===",
        f"# === STRATEGY SECTION START ===\\n{strategy_code}\\n# === STRATEGY SECTION END ===",
        original,
    )

with open(SIGNAL_PY, "w") as f:
    f.write(new_code)

print("‚úÖ crypto_signal.py successfully updated with latest strategy code!")
EOF
          fi
          echo "‚úÖ sync_strategy.py ready."

      # ‚úÖ Run sync to update crypto_signal.py
      - name: üîÑ Sync latest strategy into crypto_signal.py
        run: |
          python utils/sync_strategy.py || echo "‚ö†Ô∏è Sync failed, continuing with previous version."

      # ‚úÖ Run crypto signal bot
      - name: Run crypto signal bot
        env:
          SIGNAL_EMAIL: ${{ secrets.SIGNAL_EMAIL }}
          ZAPIER_URL: ${{ secrets.ZAPIER_URL }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
        run: |
          echo "üöÄ Running crypto_signal.py ..."
          python crypto_signal.py || exit 1

      # ‚úÖ Commit updated signal files
      - name: Commit and push updates
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üßæ Checking for updates..."
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git pull origin main || true
          git add last_signals.json crypto_signal.py || true
          git commit -m "Auto-update: signals + strategy [skip ci]" || echo "No changes to commit"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git main || echo "Push skipped"

      # ‚úÖ Upload artifacts (optional)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crypto-results
          path: |
            *.csv
            *.txt
            last_signals.json
          if-no-files-found: ignore
